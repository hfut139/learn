//关键词 typedef

//typedef unsigned int uint;  //将unsigned int 重命名为uint，这里uint也是一个类型名
//
//int main()
//{
//	uint n1 = 0;
//	unsigned int n2 = 0;
//
//	return 0;
//}

//static
//1.修饰局部变量
//2.修饰全局变量
//3.修饰函数

//void test()
//{
//	//int a = 1;
//	static int a = 1; //static 修饰局部变量的时候，局部变量出了作用域，不销毁
//	a++;
//	printf("%d", a);
//}
//
//int main()
//{
//	int i = 0;
//	while (i < 10)
//	{
//		test();
//		i++;
//	}
//}

//static修饰全局变量的时候，这个全局变量的外部链接属性就变成内部链接属性，其他源文件(.c)就不能使用这个全局变量

//static修饰函数，同上

//define定义标识符常量
//#define NUM 100
//int main()
//{
//	printf("%d\n", NUM);
//	int a = NUM;
//	printf("%d", a);
//
//		return 0;
//}

//define定义宏
//宏是有参数

//#define ADD(x,y)  ((x)+(y))
//int main()
//{
//	int x = 20, y = 10;
//	int z = ADD(x ,y);
//	printf("%d", z);
//
//
//	return 0;
//}

//int main()
//{
//	int a = 10;//向内存申请4个字节，存储10
//	//&a，取地址操作符
//	//printf("%p\n",&a);
//	int* p = &a; //p就是指针变量
//	*p = 30;//解引用操作符，意思就是通过p中存放的地址，找到其对象，*p就是p指向的对象
//
//	printf("%d\n", a);
//	//printf("%p\n", p);
//
//	return 0;
//}

//int main()
//{
//	//指针变量的大小取决于地址的大小
//	//32位平台下地址是32个bit位（4个byte）
//	//64位平台下地址是64个bit位（8个byte）
//
//	printf("%zu\n", sizeof(char*));
//	printf("%zu\n", sizeof(int*));
//	printf("%zu\n", sizeof(double*));
//	printf("%zu\n", sizeof(float*));
//	printf("%zu\n", sizeof(short*));
//
//	return 0;
//}


//struct stu
//{
//	char name[20];
//	int age;
//	char sex[20];
//	char tele[30];
//};
//
//void print(struct stu *ps)
//{
//	printf("%s %d %s %s\n", (*ps).name, (*ps).age, (*ps).sex, (*ps).tele);
//
//	printf("%s %d %s %s\n", ps->name, ps->age, ps->sex, ps->tele);//指针结构体变量->成员名
//
//	return 0;
//
//}
//int main()
//{
//	struct stu s = { "zhangsan", 20, "nan", "18181852783" };
//	//printf("%s %d %s %s\n", s.name,s.age,s.sex,s.tele);
//
//	print(&s);
//
//	return 0;
//}

//int main()
//{
//	int age = 70;
//	printf("请输入您的年龄：");
//	scanf("%d", &age);
//	if (age <= 16)
//		printf("少年");
//	else if (age > 16 && age <= 28)
//		printf("青年");
//	else if (age > 28 && age <= 60)
//		printf("中年");
//	else if (age > 60 && age < 100)
//		printf("老年");
//	else
//		printf("百岁老人");
//
//	return 0;
//}

//判断一个数是否为奇数

//int main()
//{
//	int num = 0;
//	printf("请输入您要判断的数值：");
//	scanf("%d", &num);
//	if (num % 2 == 1)
//		printf("该数值为奇数\n");
//	else
//		printf("该数值为偶数\n");
//
//	return 0;
//}

//输出1到100之间的奇数

//int main()
//{
//	int num = 0;
//	while (num < 100)
//	{
//		if (num % 2 == 1)
//			printf("%d  ", num);
//		/*else
//		{ 
//			printf("");
//	    }*/
//		num++;
//	}
//	return 0;
//}

//switch语句
//switch(整型表达式)
//{
	//语句项

//}

//int main()
//{
//	int day = 0;
//	scanf("%d", &day);
//	switch (day)
//	{
//	case 1:  //case+整型常量表达式
//		printf("星期1\n");
//		break;
//	case 2:
//		printf("星期2\n");
//		break;
//	case 3:
//		printf("星期3\n");
//		break;
//	case 4:
//		printf("星期4\n");
//		break;
//	case 5:
//		printf("星期5\n");
//		break;
//	case 6:
//		printf("星期6\n");
//		break;
//	}
//	return 0;
//}

//int main()
//{
//	int day = 0;
//	scanf("%d", &day);
//	switch (day)
//	{
//	case 1:  //case+整型常量表达式
//	case 2:
//	case 3:
//	case 4:
//	case 5:
//		printf("weekday\n");
//		break;
//	case 6:
//	case 7:
//		printf("weekend\n");
//		break;
//	default:
//		printf("选择错误\n");
//		break;
//
//	}
//	return 0;
//}

//打印1-10数字

//break 永久的终止循环
//continue跳过本次循环后面的代码，直接去判断部分，进行下一次循环的判断
//int main()
//{
//	int i = 1;
//	while (i <=10)
//	{
//		i++;
//		if (i == 5)
//			//break;   
//			continue;   
//		printf("%d", i);
//		//i++;
//	}
//
//	return 0;
//}

//int main()
//{
//	int x= getchar();
//	
//	printf("%c\n", x);
//	putchar(x);
//
//	return 0;
//}

//int main()
//{
//	char password[20] = { 0 };
//	printf("请输入密码：");
//	scanf("%s", &password);
//	//getchar();
//	int ch = 0;
//	while ((ch = getchar()) !='\n')
//	{
//		;
//	}
//	printf("请确认密码(Y/N)：");
//
//	int ret = getchar();
//	if ('Y' == ret)
//		printf("Y");
//	else
//		printf("N");
//	return 0;
//}

//'a';//97
//作业

//int main()
//{
//	int arr[] = { 73,32,99,97,110,32,100,111,32,105,116,33 };
//	int i = 0;
//	int num = sizeof(arr) / sizeof(arr[0]);
//	while (i < num)
//	{
//		printf("%c", arr[i]);
//		i++;
//	}
//	return 0;
//}

//int main()
//{
//	int year = 0;
//	int month = 0;
//	int day = 0;
//	scanf("%4d%2d%2d", &year, &month, &day);
//
//	printf("year=%4d\n", year);
//	printf("month=%02d\n", month);
//	printf("day=%02d\n", day);
//		
//
//
//	return 0;
//}

//int main() {
//	int year, month, day;
//	int input_date;
//
//	// 输入生日信息，连续输入年月日
//	printf("请输入连续的年月日（例如19900405表示1990年4月5日）: ");
//	scanf("%d", &input_date);
//
//	// 提取年、月、日
//	year = input_date / 10000;         // 取整除得到年份
//	month = (input_date % 10000) / 100; // 取余数再除以100得到月份
//	day = input_date % 100;            // 取余数得到日期
//
//	// 输出生日信息
//	printf("\n您的出生日期为: %d年%d月%d日\n", year, month, day);
//
//	return 0;
//}

//int main()
//{
//	int stu_num;
//	float grade_c, grade_math, grade_Engish;
//	scanf("%d;%f,%f,%f", &stu_num, &grade_c, &grade_math, &grade_Engish);
//
//	printf("The each subject score of No. %d  is %.2f,%.2f,%.2f\n", stu_num, grade_c, grade_math, grade_Engish);
//	return 0;
//}

//int main()
//{
//	int n=printf("Hello world!\n");
//	printf("%d\n",n-1);
//
//	int n = printf("Hello world!");
//	printf("\n%d\n", n );
//	return 0;
//}


//int main()
//{
//	int mid = 0;
//	int mid1 = 0;
//	int a, b, c, d;
//	printf("请输入四个整数：");
//	scanf("%d %d %d %d", &a, &b, &c, &d);
//	if (a > b)
//		mid = a;
//	else
//		mid = b;
//	if (mid < c)
//		mid1 = c;
//	else
//		mid1 = mid;
//	if (mid1 > d)
//		printf("最大数为：%d", mid1);
//	else
//		printf("最大数为：%d", d);
//	return 0;
//}

//int main()
//{
//	int arr[4] = { 0 };
//	int i = 0;
//	printf("请输入四个整数：");
//	for (i = 0; i < 4; i++)
//	{
//		scanf("%d", &arr[i]);
//	}
//
//	int max = arr[0];
//	int j = 1;
//	while (j < 4)
//	{
//		if (max < arr[j])
//		{
//			max = arr[j];
//		}
//		j++;
//	}
//	printf("最大数为：%d", max);
//	return 0;
//}

//int main()
//{
//	float r, V;
//	printf("请输入球的半径：");
//	scanf("%f", &r);
//	V = (4 / 3) * 3.1415926 * r * r * r;
//	printf("%.3f", V);
//
//	return 0;
//}

//int main()
//{
//	int weight=0 ;
//	int height=0;
//	float BMI;
//	printf("请输入体重和身高：");
//	scanf("%d %d", &weight, &height);
//	BMI =weight/((float)height/100) / ((float)height/100);
//	printf("%.2f", BMI);
//
//	return 0;
//}

//int main()
//{
//	int i = 0;
//	for (i = 1; i <= 10; i++)
//	{
//		if (i == 5)
//			continue;
//		printf("%d", i);
//	}
//	return 0;
//}

//int main()
//{
//	int i = 1;
//	do
//	{
//		//i++;
//		if (i == 5)
//			//break;
//			continue;
//		printf("%d", i);
//		i++;
//	}
//	while (i <=10);
//	return 0;
//}

//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	for (i = 0; i < 10;i++)
//	{
//		printf("%d", arr[i]);
//	}
//
//	return 0;
//}

//for 循环判断部分省略意味着判断会恒成立
//int main()
//{
//	for (;;)
//	{
//		printf(''hehe'');
//	}
//
//	return 0;
//}

//计算n的阶乘

//int main()
//{
//	int i = 1;
//	int m = 1;
//	int k = 0;
//	int sum = 0;
	//printf("请输入n的值：");
	//scanf("%d", &n);
	/*for (i = 1; i <= 3; i++)
	{
		m = 1;
		for (k = 1; k <=i; k++)
		{
			m = m * k;
		}
		sum = m + sum ;
	}*/

//	for (i = 1; i <= 10; i++)
//	{
//		m = m * i;
//		sum = sum + m;
//
//	}
//	printf("%d", sum);
//	return 0;
//}

//二分查找
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int k = 3;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int left = 0;
//	int right = sz - 1;
//
//	while (left <= right)
//	{
//		int mid = (left + right) / 2;
//		if (arr[mid] > k)
//		{
//			right = mid - 1;
//		}
//		else if (arr[mid] < k)
//		{
//			left = mid + 1;
//		}
//		else 
//		{
//			printf("找到了，下标是：%d", mid);
//			break;
//		}
//	}
//	if (left > right)
//		printf("对不起，没找到");
//
//	return 0;
//}

//void Swap1(int x, int y)
//{
//	int z = 0;
//	z = x;
//	x = y;
//	y = z;
//}
//
//void Swap2(int* px, int* py)
//{
//	int z = 0;
//	z = *px;
//	*px = *py;
//	*py = z;
//}
//
//int main()
//{
//	int a = 0;
//	int b = 0;
//	scanf("%d %d", &a, &b); 
//	printf("交换前a:%d,b:%d\n", a, b);
//
//	 //实参-实际参数
//	Swap1(a, b);    //传值调用
//
//	Swap2(&a,&b);  //传址调用
//
//	printf("交换后a:%d,b:%d\n", a, b);
//	return 0;
//}

//判断素数

//int main()
//{
//	int i = 0;
//	int j = 0;
//	int count = 0;
//	for (i = 2; i <= 100; i++)
//	{
//		int flag = 1;
//		for (j = 2; j <= i - 1; j++)
//		{
//			if (i % j == 0)
//			{
//				flag = 0;
//				break;
//			}
//		}
//		if (flag == 1)
//		{
//			count++;
//			printf("%d  ", i);
//		}
//	}
//	printf("\n%d", count);
//	return 0;
//}

#include<math.h>
//sqrt是开平方函数
//int main()
//{
//	int i = 0;
//	int j = 0;
//	int count = 0;
//	for (i = 2; i <= 100; i+=1)
//	{
//		int flag = 1;
//		for (j = 2; j <= sqrt(i) ; j++)
//		{
//			if (i % j == 0)
//			{
//				flag = 0;
//				break;
//			}
//		}
//		if (flag == 1)
//		{
//			count++;
//			printf("%d  ", i);
//		}
//	}
//	printf("\ncount=%d", count);
//	return 0;
//}

//是素数返回1
// 不是素数返回0

//int is_prime(int n)
//{
//	int j = 0;
//	for (j = 2; j <= sqrt(n); j++)
//	{
//		if (n % j == 0)
//		{
//		return 0;	
//		}
//	}
//	return 1;
//}
//
//
//int main()
//{
//	int i = 0;
//	int count = 0;
//	for (i = 2; i <= 100; i += 1)
//	{
//		if (is_prime(i))
//		{
//			count++;
//			printf("%d ", i);
//		}
//	}
//	printf("\ncount=%d", count);
//	return 0;
//}


//判断一年是不是闰年
//打印1000-2000年之间的闰年

//int year_judge(int n)
//{
//	if ((n % 4 == 0 && n % 100 != 0) || (n % 400 == 0))
//		return 1;
//	else
//		return 0;
//}
//
//int main()
//{
//	int year = 0;
//	int count = 0;
//	for (year = 1000; year <= 2000; year++)
//	{
//		if (year_judge(year))
//		{
//			printf("%d  ", year);
//			count++;
//		}
//	}
//	printf("\ncount=%d", count);
//
//	return 0;
//}

//写一个函数，实现一个整形有序数组的二分查找

//int  binary_search(int arr[], int k, int sz)
//{
//	int left = 0;
//	int right = sz - 1;
//	while(left<=right)
//	{ 
//		int mid = (left + right) / 2;
//		if (k < arr[mid])
//		{
//			right = mid - 1;
//		}
//		else if (k > arr[mid])
//		{
//			left = mid + 1;
//		}
//		else
//			return mid;
//	}
//	return -1;
//}
//
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int k = 17;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//
//	//找到了，返回下标
//	//找不到，返回-1
//
//	int ret = binary_search(arr, k , sz);
//	if (ret == -1)
//	{
//		printf("找不到");
//	}
//	else
//		printf("%d", ret);
//
//	return 0;
//}

//这是一个错误示范
//数组传参实际上传递的是数组首元素的地址，而不是整个数组
//所以在函数内部计算一个函数参数部分的数组元素个数是不行的
//int  binary_search(int arr[], int k)
//{
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int left = 0;
//	int right = sz - 1;
//	while (left <= right)
//	{
//		int mid = (left + right) / 2;
//		if (k < arr[mid])
//		{
//			right = mid - 1;
//		}
//		else if (k > arr[mid])
//		{
//			left = mid + 1;
//		}
//		else
//			return mid;
//	}
//	return -1;
//}
//
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int k = 17;
//
//
//	//找到了，返回下标
//	//找不到，返回-1
//
//	int ret = binary_search(arr, k);
//	if (ret == -1)
//	{
//		printf("找不到");
//	}
//	else
//		printf("%d", ret);
//
//	return 0;
//}

//函数的声明和定义

//函数的声明
//int add(int x, int y);
//
//int main()
//
//{
//	int a, b, c;
//	scanf("%d %d", &a, &b);
//	c = add(a, b);
//	printf("%d", c);
//
//	return 0;
//}
////函数定义
//int add(int x, int y)
//{
//	return x + y;
//}


//接受一个整型值（无符号），按照顺序打印它的每一位
//例如：输入：1234，输出：1 2 3 4 

//%d 打印有符号的整数（会有正负数）
//%u是打印无符号的整数

//int main()
//{
//	unsigned int num = 0;
//	scanf("%u",&num);
//	while (num)
//	{
//		printf("%d  ", num % 10);
//		num = num / 10;
//	}
//	return 0;
//}

//递归的实现

//void print(unsigned n)
//{
//	if (n > 9)
//	{
//		print(n / 10);
//	}
//	printf("%d ", n % 10);
//}
//
//int main()
//{
//	unsigned int num = 0;
//	scanf("%u", &num);
//	print(num);
//	return 0;
//}

//编写函数不允许创建临时变量，求字符串的长度

//int my_strlen(char*arr)
//{
//	int count = 0; //计数，临时变量
//	while (*arr != '\0')
//	{
//		count++;
//		arr++;
//	}
//	return count;
//}
//int main()
//{
//	int len = my_strlen("abc");
//	printf("%d", len);
//	return 0;
//}

//递归
//int my_strlen(char* k)
//{
//	if (*k != '\0')
//	{
//		return 1 + my_strlen(k + 1);
//	}
//	else
//		return 0;
//}
//int main()
//{
//	char arr[] = "abc";
//	int len = my_strlen(arr);
//	printf("%d", len);
//	return 0;
//}

// int fac(int k)
//{
//	if (k == 1)
//	{
//		return 1;
//	}
//	else if(k>1)
//	{
//		return k * fac(k - 1);
//	}
//}
//
//int main()
//{
//	int n = 0;
//	int ret=0;
//	printf("请输入n值：");
//	scanf("%d", &n);
//	ret = fac(n);
//	printf("%d", ret);
//
//	return 0;
//}

//斐波那契数列
//1，1，2，3，5，8，13，21，34，55

//递归,重复计算，耗时
//int fib(int n)
//{
//	if (n <= 2)
//		return 1;
//	else
//		return fib(n - 1) + fib(n - 2);
//
//}
//
//int main()
//{
//	int n, ret;
//	printf("请输入n:");
//	scanf("%d", &n);
//	ret = fib(n);
//	printf("ret=%d", ret);
//	return 0;
//}

//寻找斐波那契数列-简化
//int fib(int n)
//{
//	int a = 1;
//	int b = 1;
//	int c = 0;
//	while (n >= 3)
//	{
//		c = a + b;
//		a = b;
//		b = c;
//		n--;
//	}
//	return c;
//}
//
//int main()
//{
//	int n, ret;
//	printf("请输入n:");
//	scanf("%d", &n);
//	ret = fib(n);
//	printf("ret=%d", ret);
//	return 0;
//}


//一维数组
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	for (i = 0; i < sz; i++)
//	{
//		printf("arr[%d]=%p\n", i, &arr[i]);
//
//	}
//	return 0;
//}

//二维数组
//int main()
//{
//	int arr[3][4] = { 1,2,3,4,5,6,7,8,9,2,4,5 };
//	int i = 0;
//	for (i = 0; i <= 2; i++)
//	{
//		int j = 0;
//		for (j = 0; j <= 3; j++)
//		{
//			//printf("%d", arr[i][j]);
//			printf("arr[%d][%d]=%p\n", i, j, &arr[i][j]);
//		}
//		//printf("\n");
//	}
//	return 0;
//}

//冒泡排序法
//void bubble_sort(int arr[], int sz)  //地址应该使用指针来接收，这里arr看似是数组，本质是指针变量
//{
//	int i = 0;
//	int temp = 0;
//	//int sz = sizeof(arr) / sizeof(arr[0]);  //  4/4=1
//	for (i = 0; i <= sz - 1; i++)
//	{
//		int j = 0;
//		for (j = 0; j < sz - 1 - i; j++)
//		{
//			if (arr[j + 1] < arr[j])
//				temp = arr[j+ 1];
//				arr[j + 1] = arr[j];
//				arr[j] = temp;
//		}
//	}
//}
//
//int main()
//{
//	int arr[] = {9,8,7,6,5,4,3,2,1};
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	bubble_sort(arr, sz);
//	for (int i = 0; i < sz; i++)
//	{
//		printf("%d", arr[i]);
//	}
//	return 0;
//}

//算术操作符
//int main()
//{
//	int a = 7 % 2;
//	int b = 7 / 2;
//	float c = 7.0 / 2;
//	printf("%d\n", a);
//	printf("%d\n", b);
//	printf("%.1f\n", c);
//	return 0;
//}
//%取模操作符的两端必须是整数

//移位操作符

//整数的2进制有三种，原码，反码，补码

//正的整数的原码，反码，补码都相同
//负的整数的原码，反码，补码要计算

//7
//00000000000000000000000000000111  原码
//00000000000000000000000000000111  原码
//00000000000000000000000000000111  原码

//-7
//10000000000000000000000000000111  原码
//11111111111111111111111111111000  反码（原码的符号位不变，其他位按位取反就是反码）
//11111111111111111111111111111001  补码（反码+1就是补码）

//整数在内存中存储的是补码


//左移
//int main()
//{
//	int a = 7;
//	//左移操作符
//	//移动的是二进制位
//	int b = a << 1;
//	printf("a=%d\n", a);
//	printf("b=%d\n", b);
//
//	return 0;
//}

//int main()
//{
//	int a = -7;
//	//左移操作符
//	//移动的是二进制位
//	int b = a << 1;
//	printf("a=%d\n", a);
//	printf("b=%d\n", b);
//
//	return 0;
//}

//右移：
//逻辑移位：左边用0填充，右边丢弃
//算术移位：左边用原该值的符号位填充，右边丢弃
//int main()
//{
//	int a = 7;
//	//左移操作符
//	//移动的是二进制位
//	int b = a >> 1;
//	printf("a=%d\n", a);
//	printf("b=%d\n", b);
//
//	return 0;
//}

//int main()
//{
//	int a =- 7;
//	//左移操作符
//	//移动的是二进制位
//	int b = a >> 1;
//	printf("a=%d\n", a);
//	printf("b=%d\n", b);
//
//	return 0;
//}

// &-按（二进制）位与
// |-按（二进制）位或
// ^-按（二进制）位异或

//int main()
//{
//	int a = 3;
//	int b = -5;
//	int c = a & b;
//	printf("c=%d\n", c);
//	int d = a | b;
//	printf("d=%d\n", d);
//	int e = a ^ b;
//	printf("e=%d", e);
//	return 0;
//}

//不能创建临时变量，实现两个数交换

//int main()
//{
//	int a = 3;
//	int b = 5;
//	printf("交换前a与b，a=%d,b=%d\n", a, b);
//	a = a ^ b;  //3^5
//	b = a ^ b;  //3^5^5
//	a = a ^ b;  //3^5^3
//	printf("交换后a与b，a=%d,b=%d", a, b);
//
//	return 0;
//}  


//编写代码实现：求一个整数存储在内存中的二进制中1的个数
//求补码的二进制中1的个数
//int main()
//{
//	int a = 19272388;
//	int i = 0;
//	int num = 0;
//	int b = 0;
//	for (i = 0; i < 32; i++)
//	{
//		b = a & 1;
//		if ( b  == 1)
//		{
//			num++;
//		}
//		a = a >> 1;
//	}
//	printf("num=%d", num);
//	//00000000000000000000000000001000      00000001001001100001001011000100 
//	//00000000000000000000000000000001
//	//00000000000000000000000000000001      00000000000000000000000011111111
//
//	//00000000000000000000000000000001
//	//
//
//	return 0;
//}


//int main()
//{
//	int a = 10;
//	int* p = &a;
//	*p = 20;
//	printf("%d", a);
//
//	return 0;
//}

//int main()
//{
//	int a = 3;
//	int b = 0;
//	int c = a && b;  //逻辑与
//	int d = a || b;  //逻辑或
//	printf("%d\n", c);
//	printf("%d", d);
//	return 0;
//}

//int main()
//{
//	int i = 0, a = 1, b = 2, c = 3, d = 4;
//	//i = a++ && ++b && d++;
//	i = a++ || ++b || d++;
//
//	printf("a=%d\nb=%d\nc=%d\nd=%d\n", a, b, c, d);
//
//	return 0;
//}

//三目操作符

//int main()
//{
//	int a = 3, b = 4;
//	int c = (a > b ? 4 : 7);
//	printf("%d", c);
//
//	return 0;
//}

//int main()
//{
//	int a = 1, b = 2;
//	int c = (a > b, a = b + 10, a, b = a + 1);
//	printf("%d\n", c);
//
//	return 0;
//}

//struct Stu
//{
//	char name[20];
//	int age;
//	double score;
//
//};
//void set_stu(struct Stu *ps)
//{
//	strcpy(ps -> name, "zhangsan");
//	ps->age = 20;
//	ps->score = 100.00;
//
//}
//void print_stu(struct Stu ss)
//{
//	printf("%s %d %.2f\n", ss.name, ss.age, ss.score);
//
//
//}
//
//int main()
//{
//	struct Stu s = { 0 };
//	set_stu(&s);
//	print_stu(s);
//
//	return 0;
//}

//int 4byte - 32bit
//char 1byte - 8bit

//int main()
//{
//	//00000000000000000000000000000101
//	//00000101
//	char a = 5;
//
//	char b = 126;
//	//00000000000000000000000001111110
//	//01111110
//
//	char c = a + b;
//	//00000101  -a
//	//01111110  -b
//	//10000011  -c
//	//11111111111111111111111110000011  -补码
//	//11111111111111111111111110000010  -反码
//	//10000000000000000000000001111101  -125
//
//	printf("%d", c);
//	return 0;
//}

//int fib(x)
//{
//	if (x <= 2)
//		return x;
//	else
//		return  fib(x - 1) + fib(x - 2);
//}
//
//int main()
//{
//	int n = 0;
//	printf("请输入n：");
//	scanf("%d", &n);
//	int m=fib(n);
//	printf("%d", m);
//	return 0;
//}

//int main()
//{
//	int n = 0;
//	scanf("%d",&n);
//	int arr[50];
//	int i = 0;
//	for (i = 0; i < n; i++)
//	{
//		scanf("%d", &arr[i]);
//	}
//	int j = 0;
//	int del = 0;
//	scanf("%d", &del);
//	for (i = 0; i < n; i++)
//	{
//		if (arr[i] != del)
//		{
//			arr[j++] = arr[i];
//		}
//	}
//	for (i = 0; i < j; i++)
//	{
//		printf("%d", arr[i]);
//	}
//	return 0;
//}

//找最大值与最小值之差
//int main()
//{
//	int n = 0;
//	int max = 0;
//	int min = 100;
//	int i = 0;
//	int c = 0;
//	int arr[50];
//	scanf("%d",&n);
//	for (i = 0; i < n; i++)
//	{
//		scanf("%d", &arr[i]);
//		if (arr[i] > max)
//		{
//			max = arr[i];
//		}
//		if (arr[i] < min)
//		{
//			min = arr[i];
//		}
//	}
//	c = max - min;
//	printf("%d", c);
//	return 0;
//}

#include<ctype.h>
//int main()
//{
//	char ch = 0;
//	while (scanf("%c", &ch) != EOF)
//	{
//		if (islower(ch))
//			printf("%c ", toupper(ch));
//		else if (isupper(ch))
//			printf("%c ", tolower(ch));
//	}
//	return 0;
//}

//int main()
//{
//
//	char ch = 0;
//	while (scanf(" %c", &ch) != EOF)
//	{
//		if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z'))
//			printf("%c is an alphabet.\n", ch);
//		else
//			printf("%c is not an alphabet.\n", ch);
//	}
//	return 0;
//}

#include<math.h>
//int main()
//{
//	int i = 0;
//	for (i = 10000; i <= 99999; i++)
//	{
//		int j = 0;
//		int sum = 0;
//		for (j = 1; j <= 4; j++)
//		{
//			int k = (int)pow(10, j);
//			sum =sum+ (i % k) * (i / k);
//		}
//		if (sum == i)
//			printf("%d ", sum);
//	}
//	return 0;
//}

//int main()
//{
//	int a = 10;  //a是整型变量，占用4个字节的内存空间
//	int* pa = &a;//pa是一个指针变量，用来存放地址的
//	
//	//本质上指针就是地址
//	//口语中说的指针，其实是指针变量，指针变量就是一个变量，指针变量是用来存放地址的一个变量
//
//	return 0;
//}

//1.
//int my_strlen(char* str)
//{
//	int count = 0;
//	while (*str != 0)
//	{
//		count++;
//		str++;
//	}
//	return count;
//}

//2.递归版本

//3.指针-指针
//int my_strlen(char* str)
//{
//	char* start = str;
//	while (*str != 0)
//	{
//		str++;
//	}
//	return (str - start);
//}
//
//int main()
//{
//	int len =my_strlen("abcdef");
//	printf("%d\n", len);
//
//	return 0;
//}

//int main()
//{
//	int arr[10] = { 0 };
//	int* p = arr;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", *(arr+ i));
//		//printf("%d ", *(p + i));
//	}
//	return 0;
//}

//二级指针
//int main()
//{
//	int a = 10;
//	int* pa = &a;//pa是一个指针变量，一级指针变量
//
//	int** ppa = &pa;//ppa是一个二级指针变量
//	**ppa = 20;
//
//	//**pa = 20;
//	printf("%d", a);
//
//	return 0;
//}

//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = 30;

	/*int arr[10];

	int* pa = &a;
	int* pb = &b;
	int* pc = &c;*/

	//parr就是存放指针的数组
	//指针数组
	//int* parr[10] = { &a,&b,&c };

	//int i = 0;
	//for (i = 0; i < 3; i++)
	//{
	//	printf("%d ", *parr[i]);
	//}


	/*int arr[3][4] = { 1,2,3,4,2,3,4,5,3,4,5,6 };
	int i = 0;
	int j = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 4; j++)
		{
			printf("%d ", arr[i][j]);
		}
		printf("\n");
	}*/

//	int arr1[4] = { 1,2,3,4 };
//	int arr2[4] = { 2,3,4,5 };
//	int arr3[4] = { 3,4,5,6 };
//
//	int *parr[3] = { arr1,arr2,arr3 };
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 4; j++)
//		{
//			printf("%d", parr[i][j]);
//		}
//		printf("\n");
//	}
//	return 0;
//}


//struct Peo
//{
//	char name[20];
//	char tele[20];
//	char sex[5];
//	int height;
//};
//
//struct St
//{
//	struct Peo p;
//	int num;
//	float f;
//};
//
//void print1(struct Peo *p)
//{
//	printf("%s %s %s %d\n", p->name, p->tele, p->sex, p->height);
//}
//
//void print2(struct Peo p)
//{
//	printf("%s %s %s %d\n", p.name, p.tele, p.sex, p.height);
//}
//
//void print3(struct St* s)
//{
//	printf("%s %s %s %d %d %.2f\n", s->p.name, s->p.tele, s->p.sex, s->p.height,s->num,s->f);
//}
//
//void print4(struct St s)
//{
//	printf("%s %s %s %d %d %.2f\n", s.p.name, s.p.tele, s.p.sex, s.p.height,s.num,s.f);
//}
//
//
//
//int main()
//{
//	struct Peo p1 = { "张三","18181852783","男",180};
//	struct St s = { {"李玲","15595834931","女",165},100,3.14 };
//	/*printf("%s %s %s %d\n", p1.name, p1.tele, p1.sex, p1.height);
//
//	printf("%s %s %s %d %d %.2f", s.p.name, s.p.tele, s.p.sex, s.p.height, s.num, s.f);*/
//
//	/*print1(&p1);
//	print2(p1);*/
//	print3(&s);
//	print4(s);
//
//	return 0;
//}

//void test2()
//{
//	printf("hehe\n");
//}
//void test1()
//{
//	test2();
//}
//void test()
//{
//	test1();
//}			
//
//int main()7
//{
//	test();
//}


//bug
//int main()
//{
//	int i = 0;
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	for (i = 0; i <= 12; i++)
//	{
//		arr[i] = 0;
//		printf("hehe\n");
//	}
//}

//void my_strcpy(char *dest,char *src,int len)
//{
//	int i = 0;
//	for (i = 0; i < len; i++)
//	{
//		*dest = *src;
//		dest++;
//		src++;
//	}
//}
//
//int main()
//{
//	char arr1[20] = "XXXXXXXXXXXXXX";
//	char arr2[] = "Hello bit";
//	int len = sizeof(arr2) / sizeof(arr2[0]);
//	//strcpy在拷贝字符串的时候，会把源字符串中的\0也拷贝过去
//	//strcpy(arr1, arr2);
//	my_strcpy(arr1, arr2,len);
//	printf("%s\n", arr1);
//
//	return 0;
//}

//求字符串长度
#include<assert.h>
int my_strlen(const char*str)
{
	int count = 0;
	assert(str);     //如果 str 为 NULL 或等于 0，程序将终止并显示错误信息，帮助开发者发现潜在的逻辑错误
	while (*str != '\0')
	{
		str++;
		count++;
	}
	return count;
}

int main()
{
	char arr[] = "hello bit";
	int len = my_strlen(arr);
	printf("%d\n", len);

	return 0;
}
